// Copyright (C) 2018 The Android Open Source Project
// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated module goldfish_vk_counting_guest
// (header) generated by android/android-emugl/host/libs/libOpenglRender/vulkan-registry/xml/genvk.py -registry android/android-emugl/host/libs/libOpenglRender/vulkan-registry/xml/vk.xml cereal -o android/android-emugl/host/libs/libOpenglRender/vulkan/cereal
// Please do not modify directly;
// re-run android/scripts/generate-vulkan-sources.sh,
// or directly from Python by defining:
// VULKAN_REGISTRY_XML_DIR : Directory containing genvk.py and vk.xml
// CEREAL_OUTPUT_DIR: Where to put the generated sources.
// python3 $VULKAN_REGISTRY_XML_DIR/genvk.py -registry $VULKAN_REGISTRY_XML_DIR/vk.xml cereal -o $CEREAL_OUTPUT_DIR

#pragma once

#include <vulkan/vulkan.h>


#include "vk_platform_compat.h"
#include "goldfish_vk_private_defs.h"


namespace goldfish_vk {

#ifdef VK_VERSION_1_0
void count_VkApplicationInfo(
    uint32_t featureBits,
    const VkApplicationInfo* toCount,
    size_t* count);

void count_VkInstanceCreateInfo(
    uint32_t featureBits,
    const VkInstanceCreateInfo* toCount,
    size_t* count);

void count_VkAllocationCallbacks(
    uint32_t featureBits,
    const VkAllocationCallbacks* toCount,
    size_t* count);

void count_VkPhysicalDeviceFeatures(
    uint32_t featureBits,
    const VkPhysicalDeviceFeatures* toCount,
    size_t* count);

void count_VkFormatProperties(
    uint32_t featureBits,
    const VkFormatProperties* toCount,
    size_t* count);

void count_VkExtent3D(
    uint32_t featureBits,
    const VkExtent3D* toCount,
    size_t* count);

void count_VkImageFormatProperties(
    uint32_t featureBits,
    const VkImageFormatProperties* toCount,
    size_t* count);

void count_VkPhysicalDeviceLimits(
    uint32_t featureBits,
    const VkPhysicalDeviceLimits* toCount,
    size_t* count);

void count_VkPhysicalDeviceSparseProperties(
    uint32_t featureBits,
    const VkPhysicalDeviceSparseProperties* toCount,
    size_t* count);

void count_VkPhysicalDeviceProperties(
    uint32_t featureBits,
    const VkPhysicalDeviceProperties* toCount,
    size_t* count);

void count_VkQueueFamilyProperties(
    uint32_t featureBits,
    const VkQueueFamilyProperties* toCount,
    size_t* count);

void count_VkMemoryType(
    uint32_t featureBits,
    const VkMemoryType* toCount,
    size_t* count);

void count_VkMemoryHeap(
    uint32_t featureBits,
    const VkMemoryHeap* toCount,
    size_t* count);

void count_VkPhysicalDeviceMemoryProperties(
    uint32_t featureBits,
    const VkPhysicalDeviceMemoryProperties* toCount,
    size_t* count);

void count_VkDeviceQueueCreateInfo(
    uint32_t featureBits,
    const VkDeviceQueueCreateInfo* toCount,
    size_t* count);

void count_VkDeviceCreateInfo(
    uint32_t featureBits,
    const VkDeviceCreateInfo* toCount,
    size_t* count);

void count_VkExtensionProperties(
    uint32_t featureBits,
    const VkExtensionProperties* toCount,
    size_t* count);

void count_VkLayerProperties(
    uint32_t featureBits,
    const VkLayerProperties* toCount,
    size_t* count);

void count_VkSubmitInfo(
    uint32_t featureBits,
    const VkSubmitInfo* toCount,
    size_t* count);

void count_VkMemoryAllocateInfo(
    uint32_t featureBits,
    const VkMemoryAllocateInfo* toCount,
    size_t* count);

void count_VkMappedMemoryRange(
    uint32_t featureBits,
    const VkMappedMemoryRange* toCount,
    size_t* count);

void count_VkMemoryRequirements(
    uint32_t featureBits,
    const VkMemoryRequirements* toCount,
    size_t* count);

void count_VkSparseImageFormatProperties(
    uint32_t featureBits,
    const VkSparseImageFormatProperties* toCount,
    size_t* count);

void count_VkSparseImageMemoryRequirements(
    uint32_t featureBits,
    const VkSparseImageMemoryRequirements* toCount,
    size_t* count);

void count_VkSparseMemoryBind(
    uint32_t featureBits,
    const VkSparseMemoryBind* toCount,
    size_t* count);

void count_VkSparseBufferMemoryBindInfo(
    uint32_t featureBits,
    const VkSparseBufferMemoryBindInfo* toCount,
    size_t* count);

void count_VkSparseImageOpaqueMemoryBindInfo(
    uint32_t featureBits,
    const VkSparseImageOpaqueMemoryBindInfo* toCount,
    size_t* count);

void count_VkImageSubresource(
    uint32_t featureBits,
    const VkImageSubresource* toCount,
    size_t* count);

void count_VkOffset3D(
    uint32_t featureBits,
    const VkOffset3D* toCount,
    size_t* count);

void count_VkSparseImageMemoryBind(
    uint32_t featureBits,
    const VkSparseImageMemoryBind* toCount,
    size_t* count);

void count_VkSparseImageMemoryBindInfo(
    uint32_t featureBits,
    const VkSparseImageMemoryBindInfo* toCount,
    size_t* count);

void count_VkBindSparseInfo(
    uint32_t featureBits,
    const VkBindSparseInfo* toCount,
    size_t* count);

void count_VkFenceCreateInfo(
    uint32_t featureBits,
    const VkFenceCreateInfo* toCount,
    size_t* count);

void count_VkSemaphoreCreateInfo(
    uint32_t featureBits,
    const VkSemaphoreCreateInfo* toCount,
    size_t* count);

void count_VkEventCreateInfo(
    uint32_t featureBits,
    const VkEventCreateInfo* toCount,
    size_t* count);

void count_VkQueryPoolCreateInfo(
    uint32_t featureBits,
    const VkQueryPoolCreateInfo* toCount,
    size_t* count);

void count_VkBufferCreateInfo(
    uint32_t featureBits,
    const VkBufferCreateInfo* toCount,
    size_t* count);

void count_VkBufferViewCreateInfo(
    uint32_t featureBits,
    const VkBufferViewCreateInfo* toCount,
    size_t* count);

void count_VkImageCreateInfo(
    uint32_t featureBits,
    const VkImageCreateInfo* toCount,
    size_t* count);

void count_VkSubresourceLayout(
    uint32_t featureBits,
    const VkSubresourceLayout* toCount,
    size_t* count);

void count_VkComponentMapping(
    uint32_t featureBits,
    const VkComponentMapping* toCount,
    size_t* count);

void count_VkImageSubresourceRange(
    uint32_t featureBits,
    const VkImageSubresourceRange* toCount,
    size_t* count);

void count_VkImageViewCreateInfo(
    uint32_t featureBits,
    const VkImageViewCreateInfo* toCount,
    size_t* count);

void count_VkShaderModuleCreateInfo(
    uint32_t featureBits,
    const VkShaderModuleCreateInfo* toCount,
    size_t* count);

void count_VkPipelineCacheCreateInfo(
    uint32_t featureBits,
    const VkPipelineCacheCreateInfo* toCount,
    size_t* count);

void count_VkSpecializationMapEntry(
    uint32_t featureBits,
    const VkSpecializationMapEntry* toCount,
    size_t* count);

void count_VkSpecializationInfo(
    uint32_t featureBits,
    const VkSpecializationInfo* toCount,
    size_t* count);

void count_VkPipelineShaderStageCreateInfo(
    uint32_t featureBits,
    const VkPipelineShaderStageCreateInfo* toCount,
    size_t* count);

void count_VkVertexInputBindingDescription(
    uint32_t featureBits,
    const VkVertexInputBindingDescription* toCount,
    size_t* count);

void count_VkVertexInputAttributeDescription(
    uint32_t featureBits,
    const VkVertexInputAttributeDescription* toCount,
    size_t* count);

void count_VkPipelineVertexInputStateCreateInfo(
    uint32_t featureBits,
    const VkPipelineVertexInputStateCreateInfo* toCount,
    size_t* count);

void count_VkPipelineInputAssemblyStateCreateInfo(
    uint32_t featureBits,
    const VkPipelineInputAssemblyStateCreateInfo* toCount,
    size_t* count);

void count_VkPipelineTessellationStateCreateInfo(
    uint32_t featureBits,
    const VkPipelineTessellationStateCreateInfo* toCount,
    size_t* count);

void count_VkViewport(
    uint32_t featureBits,
    const VkViewport* toCount,
    size_t* count);

void count_VkOffset2D(
    uint32_t featureBits,
    const VkOffset2D* toCount,
    size_t* count);

void count_VkExtent2D(
    uint32_t featureBits,
    const VkExtent2D* toCount,
    size_t* count);

void count_VkRect2D(
    uint32_t featureBits,
    const VkRect2D* toCount,
    size_t* count);

void count_VkPipelineViewportStateCreateInfo(
    uint32_t featureBits,
    const VkPipelineViewportStateCreateInfo* toCount,
    size_t* count);

void count_VkPipelineRasterizationStateCreateInfo(
    uint32_t featureBits,
    const VkPipelineRasterizationStateCreateInfo* toCount,
    size_t* count);

void count_VkPipelineMultisampleStateCreateInfo(
    uint32_t featureBits,
    const VkPipelineMultisampleStateCreateInfo* toCount,
    size_t* count);

void count_VkStencilOpState(
    uint32_t featureBits,
    const VkStencilOpState* toCount,
    size_t* count);

void count_VkPipelineDepthStencilStateCreateInfo(
    uint32_t featureBits,
    const VkPipelineDepthStencilStateCreateInfo* toCount,
    size_t* count);

void count_VkPipelineColorBlendAttachmentState(
    uint32_t featureBits,
    const VkPipelineColorBlendAttachmentState* toCount,
    size_t* count);

void count_VkPipelineColorBlendStateCreateInfo(
    uint32_t featureBits,
    const VkPipelineColorBlendStateCreateInfo* toCount,
    size_t* count);

void count_VkPipelineDynamicStateCreateInfo(
    uint32_t featureBits,
    const VkPipelineDynamicStateCreateInfo* toCount,
    size_t* count);

void count_VkGraphicsPipelineCreateInfo(
    uint32_t featureBits,
    const VkGraphicsPipelineCreateInfo* toCount,
    size_t* count);

void count_VkComputePipelineCreateInfo(
    uint32_t featureBits,
    const VkComputePipelineCreateInfo* toCount,
    size_t* count);

void count_VkPushConstantRange(
    uint32_t featureBits,
    const VkPushConstantRange* toCount,
    size_t* count);

void count_VkPipelineLayoutCreateInfo(
    uint32_t featureBits,
    const VkPipelineLayoutCreateInfo* toCount,
    size_t* count);

void count_VkSamplerCreateInfo(
    uint32_t featureBits,
    const VkSamplerCreateInfo* toCount,
    size_t* count);

void count_VkDescriptorSetLayoutBinding(
    uint32_t featureBits,
    const VkDescriptorSetLayoutBinding* toCount,
    size_t* count);

void count_VkDescriptorSetLayoutCreateInfo(
    uint32_t featureBits,
    const VkDescriptorSetLayoutCreateInfo* toCount,
    size_t* count);

void count_VkDescriptorPoolSize(
    uint32_t featureBits,
    const VkDescriptorPoolSize* toCount,
    size_t* count);

void count_VkDescriptorPoolCreateInfo(
    uint32_t featureBits,
    const VkDescriptorPoolCreateInfo* toCount,
    size_t* count);

void count_VkDescriptorSetAllocateInfo(
    uint32_t featureBits,
    const VkDescriptorSetAllocateInfo* toCount,
    size_t* count);

void count_VkDescriptorImageInfo(
    uint32_t featureBits,
    const VkDescriptorImageInfo* toCount,
    size_t* count);

void count_VkDescriptorBufferInfo(
    uint32_t featureBits,
    const VkDescriptorBufferInfo* toCount,
    size_t* count);

void count_VkWriteDescriptorSet(
    uint32_t featureBits,
    const VkWriteDescriptorSet* toCount,
    size_t* count);

void count_VkCopyDescriptorSet(
    uint32_t featureBits,
    const VkCopyDescriptorSet* toCount,
    size_t* count);

void count_VkFramebufferCreateInfo(
    uint32_t featureBits,
    const VkFramebufferCreateInfo* toCount,
    size_t* count);

void count_VkAttachmentDescription(
    uint32_t featureBits,
    const VkAttachmentDescription* toCount,
    size_t* count);

void count_VkAttachmentReference(
    uint32_t featureBits,
    const VkAttachmentReference* toCount,
    size_t* count);

void count_VkSubpassDescription(
    uint32_t featureBits,
    const VkSubpassDescription* toCount,
    size_t* count);

void count_VkSubpassDependency(
    uint32_t featureBits,
    const VkSubpassDependency* toCount,
    size_t* count);

void count_VkRenderPassCreateInfo(
    uint32_t featureBits,
    const VkRenderPassCreateInfo* toCount,
    size_t* count);

void count_VkCommandPoolCreateInfo(
    uint32_t featureBits,
    const VkCommandPoolCreateInfo* toCount,
    size_t* count);

void count_VkCommandBufferAllocateInfo(
    uint32_t featureBits,
    const VkCommandBufferAllocateInfo* toCount,
    size_t* count);

void count_VkCommandBufferInheritanceInfo(
    uint32_t featureBits,
    const VkCommandBufferInheritanceInfo* toCount,
    size_t* count);

void count_VkCommandBufferBeginInfo(
    uint32_t featureBits,
    const VkCommandBufferBeginInfo* toCount,
    size_t* count);

void count_VkBufferCopy(
    uint32_t featureBits,
    const VkBufferCopy* toCount,
    size_t* count);

void count_VkImageSubresourceLayers(
    uint32_t featureBits,
    const VkImageSubresourceLayers* toCount,
    size_t* count);

void count_VkImageCopy(
    uint32_t featureBits,
    const VkImageCopy* toCount,
    size_t* count);

void count_VkImageBlit(
    uint32_t featureBits,
    const VkImageBlit* toCount,
    size_t* count);

void count_VkBufferImageCopy(
    uint32_t featureBits,
    const VkBufferImageCopy* toCount,
    size_t* count);

void count_VkClearColorValue(
    uint32_t featureBits,
    const VkClearColorValue* toCount,
    size_t* count);

void count_VkClearDepthStencilValue(
    uint32_t featureBits,
    const VkClearDepthStencilValue* toCount,
    size_t* count);

void count_VkClearValue(
    uint32_t featureBits,
    const VkClearValue* toCount,
    size_t* count);

void count_VkClearAttachment(
    uint32_t featureBits,
    const VkClearAttachment* toCount,
    size_t* count);

void count_VkClearRect(
    uint32_t featureBits,
    const VkClearRect* toCount,
    size_t* count);

void count_VkImageResolve(
    uint32_t featureBits,
    const VkImageResolve* toCount,
    size_t* count);

void count_VkMemoryBarrier(
    uint32_t featureBits,
    const VkMemoryBarrier* toCount,
    size_t* count);

void count_VkBufferMemoryBarrier(
    uint32_t featureBits,
    const VkBufferMemoryBarrier* toCount,
    size_t* count);

void count_VkImageMemoryBarrier(
    uint32_t featureBits,
    const VkImageMemoryBarrier* toCount,
    size_t* count);

void count_VkRenderPassBeginInfo(
    uint32_t featureBits,
    const VkRenderPassBeginInfo* toCount,
    size_t* count);

void count_VkDispatchIndirectCommand(
    uint32_t featureBits,
    const VkDispatchIndirectCommand* toCount,
    size_t* count);

void count_VkDrawIndexedIndirectCommand(
    uint32_t featureBits,
    const VkDrawIndexedIndirectCommand* toCount,
    size_t* count);

void count_VkDrawIndirectCommand(
    uint32_t featureBits,
    const VkDrawIndirectCommand* toCount,
    size_t* count);

void count_VkBaseOutStructure(
    uint32_t featureBits,
    const VkBaseOutStructure* toCount,
    size_t* count);

void count_VkBaseInStructure(
    uint32_t featureBits,
    const VkBaseInStructure* toCount,
    size_t* count);

#endif
#ifdef VK_VERSION_1_1
void count_VkPhysicalDeviceSubgroupProperties(
    uint32_t featureBits,
    const VkPhysicalDeviceSubgroupProperties* toCount,
    size_t* count);

void count_VkBindBufferMemoryInfo(
    uint32_t featureBits,
    const VkBindBufferMemoryInfo* toCount,
    size_t* count);

void count_VkBindImageMemoryInfo(
    uint32_t featureBits,
    const VkBindImageMemoryInfo* toCount,
    size_t* count);

void count_VkPhysicalDevice16BitStorageFeatures(
    uint32_t featureBits,
    const VkPhysicalDevice16BitStorageFeatures* toCount,
    size_t* count);

void count_VkMemoryDedicatedRequirements(
    uint32_t featureBits,
    const VkMemoryDedicatedRequirements* toCount,
    size_t* count);

void count_VkMemoryDedicatedAllocateInfo(
    uint32_t featureBits,
    const VkMemoryDedicatedAllocateInfo* toCount,
    size_t* count);

void count_VkMemoryAllocateFlagsInfo(
    uint32_t featureBits,
    const VkMemoryAllocateFlagsInfo* toCount,
    size_t* count);

void count_VkDeviceGroupRenderPassBeginInfo(
    uint32_t featureBits,
    const VkDeviceGroupRenderPassBeginInfo* toCount,
    size_t* count);

void count_VkDeviceGroupCommandBufferBeginInfo(
    uint32_t featureBits,
    const VkDeviceGroupCommandBufferBeginInfo* toCount,
    size_t* count);

void count_VkDeviceGroupSubmitInfo(
    uint32_t featureBits,
    const VkDeviceGroupSubmitInfo* toCount,
    size_t* count);

void count_VkDeviceGroupBindSparseInfo(
    uint32_t featureBits,
    const VkDeviceGroupBindSparseInfo* toCount,
    size_t* count);

void count_VkBindBufferMemoryDeviceGroupInfo(
    uint32_t featureBits,
    const VkBindBufferMemoryDeviceGroupInfo* toCount,
    size_t* count);

void count_VkBindImageMemoryDeviceGroupInfo(
    uint32_t featureBits,
    const VkBindImageMemoryDeviceGroupInfo* toCount,
    size_t* count);

void count_VkPhysicalDeviceGroupProperties(
    uint32_t featureBits,
    const VkPhysicalDeviceGroupProperties* toCount,
    size_t* count);

void count_VkDeviceGroupDeviceCreateInfo(
    uint32_t featureBits,
    const VkDeviceGroupDeviceCreateInfo* toCount,
    size_t* count);

void count_VkBufferMemoryRequirementsInfo2(
    uint32_t featureBits,
    const VkBufferMemoryRequirementsInfo2* toCount,
    size_t* count);

void count_VkImageMemoryRequirementsInfo2(
    uint32_t featureBits,
    const VkImageMemoryRequirementsInfo2* toCount,
    size_t* count);

void count_VkImageSparseMemoryRequirementsInfo2(
    uint32_t featureBits,
    const VkImageSparseMemoryRequirementsInfo2* toCount,
    size_t* count);

void count_VkMemoryRequirements2(
    uint32_t featureBits,
    const VkMemoryRequirements2* toCount,
    size_t* count);

void count_VkSparseImageMemoryRequirements2(
    uint32_t featureBits,
    const VkSparseImageMemoryRequirements2* toCount,
    size_t* count);

void count_VkPhysicalDeviceFeatures2(
    uint32_t featureBits,
    const VkPhysicalDeviceFeatures2* toCount,
    size_t* count);

void count_VkPhysicalDeviceProperties2(
    uint32_t featureBits,
    const VkPhysicalDeviceProperties2* toCount,
    size_t* count);

void count_VkFormatProperties2(
    uint32_t featureBits,
    const VkFormatProperties2* toCount,
    size_t* count);

void count_VkImageFormatProperties2(
    uint32_t featureBits,
    const VkImageFormatProperties2* toCount,
    size_t* count);

void count_VkPhysicalDeviceImageFormatInfo2(
    uint32_t featureBits,
    const VkPhysicalDeviceImageFormatInfo2* toCount,
    size_t* count);

void count_VkQueueFamilyProperties2(
    uint32_t featureBits,
    const VkQueueFamilyProperties2* toCount,
    size_t* count);

void count_VkPhysicalDeviceMemoryProperties2(
    uint32_t featureBits,
    const VkPhysicalDeviceMemoryProperties2* toCount,
    size_t* count);

void count_VkSparseImageFormatProperties2(
    uint32_t featureBits,
    const VkSparseImageFormatProperties2* toCount,
    size_t* count);

void count_VkPhysicalDeviceSparseImageFormatInfo2(
    uint32_t featureBits,
    const VkPhysicalDeviceSparseImageFormatInfo2* toCount,
    size_t* count);

void count_VkPhysicalDevicePointClippingProperties(
    uint32_t featureBits,
    const VkPhysicalDevicePointClippingProperties* toCount,
    size_t* count);

void count_VkInputAttachmentAspectReference(
    uint32_t featureBits,
    const VkInputAttachmentAspectReference* toCount,
    size_t* count);

void count_VkRenderPassInputAttachmentAspectCreateInfo(
    uint32_t featureBits,
    const VkRenderPassInputAttachmentAspectCreateInfo* toCount,
    size_t* count);

void count_VkImageViewUsageCreateInfo(
    uint32_t featureBits,
    const VkImageViewUsageCreateInfo* toCount,
    size_t* count);

void count_VkPipelineTessellationDomainOriginStateCreateInfo(
    uint32_t featureBits,
    const VkPipelineTessellationDomainOriginStateCreateInfo* toCount,
    size_t* count);

void count_VkRenderPassMultiviewCreateInfo(
    uint32_t featureBits,
    const VkRenderPassMultiviewCreateInfo* toCount,
    size_t* count);

void count_VkPhysicalDeviceMultiviewFeatures(
    uint32_t featureBits,
    const VkPhysicalDeviceMultiviewFeatures* toCount,
    size_t* count);

void count_VkPhysicalDeviceMultiviewProperties(
    uint32_t featureBits,
    const VkPhysicalDeviceMultiviewProperties* toCount,
    size_t* count);

void count_VkPhysicalDeviceVariablePointerFeatures(
    uint32_t featureBits,
    const VkPhysicalDeviceVariablePointerFeatures* toCount,
    size_t* count);

void count_VkPhysicalDeviceProtectedMemoryFeatures(
    uint32_t featureBits,
    const VkPhysicalDeviceProtectedMemoryFeatures* toCount,
    size_t* count);

void count_VkPhysicalDeviceProtectedMemoryProperties(
    uint32_t featureBits,
    const VkPhysicalDeviceProtectedMemoryProperties* toCount,
    size_t* count);

void count_VkDeviceQueueInfo2(
    uint32_t featureBits,
    const VkDeviceQueueInfo2* toCount,
    size_t* count);

void count_VkProtectedSubmitInfo(
    uint32_t featureBits,
    const VkProtectedSubmitInfo* toCount,
    size_t* count);

void count_VkSamplerYcbcrConversionCreateInfo(
    uint32_t featureBits,
    const VkSamplerYcbcrConversionCreateInfo* toCount,
    size_t* count);

void count_VkSamplerYcbcrConversionInfo(
    uint32_t featureBits,
    const VkSamplerYcbcrConversionInfo* toCount,
    size_t* count);

void count_VkBindImagePlaneMemoryInfo(
    uint32_t featureBits,
    const VkBindImagePlaneMemoryInfo* toCount,
    size_t* count);

void count_VkImagePlaneMemoryRequirementsInfo(
    uint32_t featureBits,
    const VkImagePlaneMemoryRequirementsInfo* toCount,
    size_t* count);

void count_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    uint32_t featureBits,
    const VkPhysicalDeviceSamplerYcbcrConversionFeatures* toCount,
    size_t* count);

void count_VkSamplerYcbcrConversionImageFormatProperties(
    uint32_t featureBits,
    const VkSamplerYcbcrConversionImageFormatProperties* toCount,
    size_t* count);

void count_VkDescriptorUpdateTemplateEntry(
    uint32_t featureBits,
    const VkDescriptorUpdateTemplateEntry* toCount,
    size_t* count);

void count_VkDescriptorUpdateTemplateCreateInfo(
    uint32_t featureBits,
    const VkDescriptorUpdateTemplateCreateInfo* toCount,
    size_t* count);

void count_VkExternalMemoryProperties(
    uint32_t featureBits,
    const VkExternalMemoryProperties* toCount,
    size_t* count);

void count_VkPhysicalDeviceExternalImageFormatInfo(
    uint32_t featureBits,
    const VkPhysicalDeviceExternalImageFormatInfo* toCount,
    size_t* count);

void count_VkExternalImageFormatProperties(
    uint32_t featureBits,
    const VkExternalImageFormatProperties* toCount,
    size_t* count);

void count_VkPhysicalDeviceExternalBufferInfo(
    uint32_t featureBits,
    const VkPhysicalDeviceExternalBufferInfo* toCount,
    size_t* count);

void count_VkExternalBufferProperties(
    uint32_t featureBits,
    const VkExternalBufferProperties* toCount,
    size_t* count);

void count_VkPhysicalDeviceIDProperties(
    uint32_t featureBits,
    const VkPhysicalDeviceIDProperties* toCount,
    size_t* count);

void count_VkExternalMemoryImageCreateInfo(
    uint32_t featureBits,
    const VkExternalMemoryImageCreateInfo* toCount,
    size_t* count);

void count_VkExternalMemoryBufferCreateInfo(
    uint32_t featureBits,
    const VkExternalMemoryBufferCreateInfo* toCount,
    size_t* count);

void count_VkExportMemoryAllocateInfo(
    uint32_t featureBits,
    const VkExportMemoryAllocateInfo* toCount,
    size_t* count);

void count_VkPhysicalDeviceExternalFenceInfo(
    uint32_t featureBits,
    const VkPhysicalDeviceExternalFenceInfo* toCount,
    size_t* count);

void count_VkExternalFenceProperties(
    uint32_t featureBits,
    const VkExternalFenceProperties* toCount,
    size_t* count);

void count_VkExportFenceCreateInfo(
    uint32_t featureBits,
    const VkExportFenceCreateInfo* toCount,
    size_t* count);

void count_VkExportSemaphoreCreateInfo(
    uint32_t featureBits,
    const VkExportSemaphoreCreateInfo* toCount,
    size_t* count);

void count_VkPhysicalDeviceExternalSemaphoreInfo(
    uint32_t featureBits,
    const VkPhysicalDeviceExternalSemaphoreInfo* toCount,
    size_t* count);

void count_VkExternalSemaphoreProperties(
    uint32_t featureBits,
    const VkExternalSemaphoreProperties* toCount,
    size_t* count);

void count_VkPhysicalDeviceMaintenance3Properties(
    uint32_t featureBits,
    const VkPhysicalDeviceMaintenance3Properties* toCount,
    size_t* count);

void count_VkDescriptorSetLayoutSupport(
    uint32_t featureBits,
    const VkDescriptorSetLayoutSupport* toCount,
    size_t* count);

void count_VkPhysicalDeviceShaderDrawParameterFeatures(
    uint32_t featureBits,
    const VkPhysicalDeviceShaderDrawParameterFeatures* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_surface
void count_VkSurfaceCapabilitiesKHR(
    uint32_t featureBits,
    const VkSurfaceCapabilitiesKHR* toCount,
    size_t* count);

void count_VkSurfaceFormatKHR(
    uint32_t featureBits,
    const VkSurfaceFormatKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_swapchain
void count_VkSwapchainCreateInfoKHR(
    uint32_t featureBits,
    const VkSwapchainCreateInfoKHR* toCount,
    size_t* count);

void count_VkPresentInfoKHR(
    uint32_t featureBits,
    const VkPresentInfoKHR* toCount,
    size_t* count);

void count_VkImageSwapchainCreateInfoKHR(
    uint32_t featureBits,
    const VkImageSwapchainCreateInfoKHR* toCount,
    size_t* count);

void count_VkBindImageMemorySwapchainInfoKHR(
    uint32_t featureBits,
    const VkBindImageMemorySwapchainInfoKHR* toCount,
    size_t* count);

void count_VkAcquireNextImageInfoKHR(
    uint32_t featureBits,
    const VkAcquireNextImageInfoKHR* toCount,
    size_t* count);

void count_VkDeviceGroupPresentCapabilitiesKHR(
    uint32_t featureBits,
    const VkDeviceGroupPresentCapabilitiesKHR* toCount,
    size_t* count);

void count_VkDeviceGroupPresentInfoKHR(
    uint32_t featureBits,
    const VkDeviceGroupPresentInfoKHR* toCount,
    size_t* count);

void count_VkDeviceGroupSwapchainCreateInfoKHR(
    uint32_t featureBits,
    const VkDeviceGroupSwapchainCreateInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_display
void count_VkDisplayPropertiesKHR(
    uint32_t featureBits,
    const VkDisplayPropertiesKHR* toCount,
    size_t* count);

void count_VkDisplayModeParametersKHR(
    uint32_t featureBits,
    const VkDisplayModeParametersKHR* toCount,
    size_t* count);

void count_VkDisplayModePropertiesKHR(
    uint32_t featureBits,
    const VkDisplayModePropertiesKHR* toCount,
    size_t* count);

void count_VkDisplayModeCreateInfoKHR(
    uint32_t featureBits,
    const VkDisplayModeCreateInfoKHR* toCount,
    size_t* count);

void count_VkDisplayPlaneCapabilitiesKHR(
    uint32_t featureBits,
    const VkDisplayPlaneCapabilitiesKHR* toCount,
    size_t* count);

void count_VkDisplayPlanePropertiesKHR(
    uint32_t featureBits,
    const VkDisplayPlanePropertiesKHR* toCount,
    size_t* count);

void count_VkDisplaySurfaceCreateInfoKHR(
    uint32_t featureBits,
    const VkDisplaySurfaceCreateInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_display_swapchain
void count_VkDisplayPresentInfoKHR(
    uint32_t featureBits,
    const VkDisplayPresentInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_xlib_surface
void count_VkXlibSurfaceCreateInfoKHR(
    uint32_t featureBits,
    const VkXlibSurfaceCreateInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_xcb_surface
void count_VkXcbSurfaceCreateInfoKHR(
    uint32_t featureBits,
    const VkXcbSurfaceCreateInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_wayland_surface
void count_VkWaylandSurfaceCreateInfoKHR(
    uint32_t featureBits,
    const VkWaylandSurfaceCreateInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_mir_surface
void count_VkMirSurfaceCreateInfoKHR(
    uint32_t featureBits,
    const VkMirSurfaceCreateInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_android_surface
void count_VkAndroidSurfaceCreateInfoKHR(
    uint32_t featureBits,
    const VkAndroidSurfaceCreateInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_win32_surface
void count_VkWin32SurfaceCreateInfoKHR(
    uint32_t featureBits,
    const VkWin32SurfaceCreateInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_sampler_mirror_clamp_to_edge
#endif
#ifdef VK_KHR_multiview
#endif
#ifdef VK_KHR_get_physical_device_properties2
#endif
#ifdef VK_KHR_device_group
#endif
#ifdef VK_KHR_shader_draw_parameters
#endif
#ifdef VK_KHR_maintenance1
#endif
#ifdef VK_KHR_device_group_creation
#endif
#ifdef VK_KHR_external_memory_capabilities
#endif
#ifdef VK_KHR_external_memory
#endif
#ifdef VK_KHR_external_memory_win32
void count_VkImportMemoryWin32HandleInfoKHR(
    uint32_t featureBits,
    const VkImportMemoryWin32HandleInfoKHR* toCount,
    size_t* count);

void count_VkExportMemoryWin32HandleInfoKHR(
    uint32_t featureBits,
    const VkExportMemoryWin32HandleInfoKHR* toCount,
    size_t* count);

void count_VkMemoryWin32HandlePropertiesKHR(
    uint32_t featureBits,
    const VkMemoryWin32HandlePropertiesKHR* toCount,
    size_t* count);

void count_VkMemoryGetWin32HandleInfoKHR(
    uint32_t featureBits,
    const VkMemoryGetWin32HandleInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_external_memory_fd
void count_VkImportMemoryFdInfoKHR(
    uint32_t featureBits,
    const VkImportMemoryFdInfoKHR* toCount,
    size_t* count);

void count_VkMemoryFdPropertiesKHR(
    uint32_t featureBits,
    const VkMemoryFdPropertiesKHR* toCount,
    size_t* count);

void count_VkMemoryGetFdInfoKHR(
    uint32_t featureBits,
    const VkMemoryGetFdInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_win32_keyed_mutex
void count_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    uint32_t featureBits,
    const VkWin32KeyedMutexAcquireReleaseInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_external_semaphore_capabilities
#endif
#ifdef VK_KHR_external_semaphore
#endif
#ifdef VK_KHR_external_semaphore_win32
void count_VkImportSemaphoreWin32HandleInfoKHR(
    uint32_t featureBits,
    const VkImportSemaphoreWin32HandleInfoKHR* toCount,
    size_t* count);

void count_VkExportSemaphoreWin32HandleInfoKHR(
    uint32_t featureBits,
    const VkExportSemaphoreWin32HandleInfoKHR* toCount,
    size_t* count);

void count_VkD3D12FenceSubmitInfoKHR(
    uint32_t featureBits,
    const VkD3D12FenceSubmitInfoKHR* toCount,
    size_t* count);

void count_VkSemaphoreGetWin32HandleInfoKHR(
    uint32_t featureBits,
    const VkSemaphoreGetWin32HandleInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_external_semaphore_fd
void count_VkImportSemaphoreFdInfoKHR(
    uint32_t featureBits,
    const VkImportSemaphoreFdInfoKHR* toCount,
    size_t* count);

void count_VkSemaphoreGetFdInfoKHR(
    uint32_t featureBits,
    const VkSemaphoreGetFdInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_push_descriptor
void count_VkPhysicalDevicePushDescriptorPropertiesKHR(
    uint32_t featureBits,
    const VkPhysicalDevicePushDescriptorPropertiesKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_16bit_storage
#endif
#ifdef VK_KHR_incremental_present
void count_VkRectLayerKHR(
    uint32_t featureBits,
    const VkRectLayerKHR* toCount,
    size_t* count);

void count_VkPresentRegionKHR(
    uint32_t featureBits,
    const VkPresentRegionKHR* toCount,
    size_t* count);

void count_VkPresentRegionsKHR(
    uint32_t featureBits,
    const VkPresentRegionsKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_descriptor_update_template
#endif
#ifdef VK_KHR_create_renderpass2
void count_VkAttachmentDescription2KHR(
    uint32_t featureBits,
    const VkAttachmentDescription2KHR* toCount,
    size_t* count);

void count_VkAttachmentReference2KHR(
    uint32_t featureBits,
    const VkAttachmentReference2KHR* toCount,
    size_t* count);

void count_VkSubpassDescription2KHR(
    uint32_t featureBits,
    const VkSubpassDescription2KHR* toCount,
    size_t* count);

void count_VkSubpassDependency2KHR(
    uint32_t featureBits,
    const VkSubpassDependency2KHR* toCount,
    size_t* count);

void count_VkRenderPassCreateInfo2KHR(
    uint32_t featureBits,
    const VkRenderPassCreateInfo2KHR* toCount,
    size_t* count);

void count_VkSubpassBeginInfoKHR(
    uint32_t featureBits,
    const VkSubpassBeginInfoKHR* toCount,
    size_t* count);

void count_VkSubpassEndInfoKHR(
    uint32_t featureBits,
    const VkSubpassEndInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_shared_presentable_image
void count_VkSharedPresentSurfaceCapabilitiesKHR(
    uint32_t featureBits,
    const VkSharedPresentSurfaceCapabilitiesKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_external_fence_capabilities
#endif
#ifdef VK_KHR_external_fence
#endif
#ifdef VK_KHR_external_fence_win32
void count_VkImportFenceWin32HandleInfoKHR(
    uint32_t featureBits,
    const VkImportFenceWin32HandleInfoKHR* toCount,
    size_t* count);

void count_VkExportFenceWin32HandleInfoKHR(
    uint32_t featureBits,
    const VkExportFenceWin32HandleInfoKHR* toCount,
    size_t* count);

void count_VkFenceGetWin32HandleInfoKHR(
    uint32_t featureBits,
    const VkFenceGetWin32HandleInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_external_fence_fd
void count_VkImportFenceFdInfoKHR(
    uint32_t featureBits,
    const VkImportFenceFdInfoKHR* toCount,
    size_t* count);

void count_VkFenceGetFdInfoKHR(
    uint32_t featureBits,
    const VkFenceGetFdInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_maintenance2
#endif
#ifdef VK_KHR_get_surface_capabilities2
void count_VkPhysicalDeviceSurfaceInfo2KHR(
    uint32_t featureBits,
    const VkPhysicalDeviceSurfaceInfo2KHR* toCount,
    size_t* count);

void count_VkSurfaceCapabilities2KHR(
    uint32_t featureBits,
    const VkSurfaceCapabilities2KHR* toCount,
    size_t* count);

void count_VkSurfaceFormat2KHR(
    uint32_t featureBits,
    const VkSurfaceFormat2KHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_variable_pointers
#endif
#ifdef VK_KHR_get_display_properties2
void count_VkDisplayProperties2KHR(
    uint32_t featureBits,
    const VkDisplayProperties2KHR* toCount,
    size_t* count);

void count_VkDisplayPlaneProperties2KHR(
    uint32_t featureBits,
    const VkDisplayPlaneProperties2KHR* toCount,
    size_t* count);

void count_VkDisplayModeProperties2KHR(
    uint32_t featureBits,
    const VkDisplayModeProperties2KHR* toCount,
    size_t* count);

void count_VkDisplayPlaneInfo2KHR(
    uint32_t featureBits,
    const VkDisplayPlaneInfo2KHR* toCount,
    size_t* count);

void count_VkDisplayPlaneCapabilities2KHR(
    uint32_t featureBits,
    const VkDisplayPlaneCapabilities2KHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_dedicated_allocation
#endif
#ifdef VK_KHR_storage_buffer_storage_class
#endif
#ifdef VK_KHR_relaxed_block_layout
#endif
#ifdef VK_KHR_get_memory_requirements2
#endif
#ifdef VK_KHR_image_format_list
void count_VkImageFormatListCreateInfoKHR(
    uint32_t featureBits,
    const VkImageFormatListCreateInfoKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
#endif
#ifdef VK_KHR_bind_memory2
#endif
#ifdef VK_KHR_maintenance3
#endif
#ifdef VK_KHR_draw_indirect_count
#endif
#ifdef VK_KHR_8bit_storage
void count_VkPhysicalDevice8BitStorageFeaturesKHR(
    uint32_t featureBits,
    const VkPhysicalDevice8BitStorageFeaturesKHR* toCount,
    size_t* count);

#endif
#ifdef VK_KHR_shader_float16_int8
void count_VkPhysicalDeviceShaderFloat16Int8Features(
    uint32_t featureBits,
    const VkPhysicalDeviceShaderFloat16Int8Features* toCount,
    size_t* count);

#endif
#ifdef VK_ANDROID_native_buffer
void count_VkNativeBufferANDROID(
    uint32_t featureBits,
    const VkNativeBufferANDROID* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_debug_report
void count_VkDebugReportCallbackCreateInfoEXT(
    uint32_t featureBits,
    const VkDebugReportCallbackCreateInfoEXT* toCount,
    size_t* count);

#endif
#ifdef VK_NV_glsl_shader
#endif
#ifdef VK_EXT_depth_range_unrestricted
#endif
#ifdef VK_IMG_filter_cubic
#endif
#ifdef VK_AMD_rasterization_order
void count_VkPipelineRasterizationStateRasterizationOrderAMD(
    uint32_t featureBits,
    const VkPipelineRasterizationStateRasterizationOrderAMD* toCount,
    size_t* count);

#endif
#ifdef VK_AMD_shader_trinary_minmax
#endif
#ifdef VK_AMD_shader_explicit_vertex_parameter
#endif
#ifdef VK_EXT_debug_marker
void count_VkDebugMarkerObjectNameInfoEXT(
    uint32_t featureBits,
    const VkDebugMarkerObjectNameInfoEXT* toCount,
    size_t* count);

void count_VkDebugMarkerObjectTagInfoEXT(
    uint32_t featureBits,
    const VkDebugMarkerObjectTagInfoEXT* toCount,
    size_t* count);

void count_VkDebugMarkerMarkerInfoEXT(
    uint32_t featureBits,
    const VkDebugMarkerMarkerInfoEXT* toCount,
    size_t* count);

#endif
#ifdef VK_AMD_gcn_shader
#endif
#ifdef VK_NV_dedicated_allocation
void count_VkDedicatedAllocationImageCreateInfoNV(
    uint32_t featureBits,
    const VkDedicatedAllocationImageCreateInfoNV* toCount,
    size_t* count);

void count_VkDedicatedAllocationBufferCreateInfoNV(
    uint32_t featureBits,
    const VkDedicatedAllocationBufferCreateInfoNV* toCount,
    size_t* count);

void count_VkDedicatedAllocationMemoryAllocateInfoNV(
    uint32_t featureBits,
    const VkDedicatedAllocationMemoryAllocateInfoNV* toCount,
    size_t* count);

#endif
#ifdef VK_AMD_draw_indirect_count
#endif
#ifdef VK_AMD_negative_viewport_height
#endif
#ifdef VK_AMD_gpu_shader_half_float
#endif
#ifdef VK_AMD_shader_ballot
#endif
#ifdef VK_AMD_texture_gather_bias_lod
void count_VkTextureLODGatherFormatPropertiesAMD(
    uint32_t featureBits,
    const VkTextureLODGatherFormatPropertiesAMD* toCount,
    size_t* count);

#endif
#ifdef VK_AMD_shader_info
void count_VkShaderResourceUsageAMD(
    uint32_t featureBits,
    const VkShaderResourceUsageAMD* toCount,
    size_t* count);

void count_VkShaderStatisticsInfoAMD(
    uint32_t featureBits,
    const VkShaderStatisticsInfoAMD* toCount,
    size_t* count);

#endif
#ifdef VK_AMD_shader_image_load_store_lod
#endif
#ifdef VK_IMG_format_pvrtc
#endif
#ifdef VK_NV_external_memory_capabilities
void count_VkExternalImageFormatPropertiesNV(
    uint32_t featureBits,
    const VkExternalImageFormatPropertiesNV* toCount,
    size_t* count);

#endif
#ifdef VK_NV_external_memory
void count_VkExternalMemoryImageCreateInfoNV(
    uint32_t featureBits,
    const VkExternalMemoryImageCreateInfoNV* toCount,
    size_t* count);

void count_VkExportMemoryAllocateInfoNV(
    uint32_t featureBits,
    const VkExportMemoryAllocateInfoNV* toCount,
    size_t* count);

#endif
#ifdef VK_NV_external_memory_win32
void count_VkImportMemoryWin32HandleInfoNV(
    uint32_t featureBits,
    const VkImportMemoryWin32HandleInfoNV* toCount,
    size_t* count);

void count_VkExportMemoryWin32HandleInfoNV(
    uint32_t featureBits,
    const VkExportMemoryWin32HandleInfoNV* toCount,
    size_t* count);

#endif
#ifdef VK_NV_win32_keyed_mutex
void count_VkWin32KeyedMutexAcquireReleaseInfoNV(
    uint32_t featureBits,
    const VkWin32KeyedMutexAcquireReleaseInfoNV* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_validation_flags
void count_VkValidationFlagsEXT(
    uint32_t featureBits,
    const VkValidationFlagsEXT* toCount,
    size_t* count);

#endif
#ifdef VK_NN_vi_surface
void count_VkViSurfaceCreateInfoNN(
    uint32_t featureBits,
    const VkViSurfaceCreateInfoNN* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_shader_subgroup_ballot
#endif
#ifdef VK_EXT_shader_subgroup_vote
#endif
#ifdef VK_EXT_conditional_rendering
void count_VkConditionalRenderingBeginInfoEXT(
    uint32_t featureBits,
    const VkConditionalRenderingBeginInfoEXT* toCount,
    size_t* count);

void count_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    uint32_t featureBits,
    const VkPhysicalDeviceConditionalRenderingFeaturesEXT* toCount,
    size_t* count);

void count_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    uint32_t featureBits,
    const VkCommandBufferInheritanceConditionalRenderingInfoEXT* toCount,
    size_t* count);

#endif
#ifdef VK_NVX_device_generated_commands
void count_VkDeviceGeneratedCommandsFeaturesNVX(
    uint32_t featureBits,
    const VkDeviceGeneratedCommandsFeaturesNVX* toCount,
    size_t* count);

void count_VkDeviceGeneratedCommandsLimitsNVX(
    uint32_t featureBits,
    const VkDeviceGeneratedCommandsLimitsNVX* toCount,
    size_t* count);

void count_VkIndirectCommandsTokenNVX(
    uint32_t featureBits,
    const VkIndirectCommandsTokenNVX* toCount,
    size_t* count);

void count_VkIndirectCommandsLayoutTokenNVX(
    uint32_t featureBits,
    const VkIndirectCommandsLayoutTokenNVX* toCount,
    size_t* count);

void count_VkIndirectCommandsLayoutCreateInfoNVX(
    uint32_t featureBits,
    const VkIndirectCommandsLayoutCreateInfoNVX* toCount,
    size_t* count);

void count_VkCmdProcessCommandsInfoNVX(
    uint32_t featureBits,
    const VkCmdProcessCommandsInfoNVX* toCount,
    size_t* count);

void count_VkCmdReserveSpaceForCommandsInfoNVX(
    uint32_t featureBits,
    const VkCmdReserveSpaceForCommandsInfoNVX* toCount,
    size_t* count);

void count_VkObjectTableCreateInfoNVX(
    uint32_t featureBits,
    const VkObjectTableCreateInfoNVX* toCount,
    size_t* count);

void count_VkObjectTableEntryNVX(
    uint32_t featureBits,
    const VkObjectTableEntryNVX* toCount,
    size_t* count);

void count_VkObjectTablePipelineEntryNVX(
    uint32_t featureBits,
    const VkObjectTablePipelineEntryNVX* toCount,
    size_t* count);

void count_VkObjectTableDescriptorSetEntryNVX(
    uint32_t featureBits,
    const VkObjectTableDescriptorSetEntryNVX* toCount,
    size_t* count);

void count_VkObjectTableVertexBufferEntryNVX(
    uint32_t featureBits,
    const VkObjectTableVertexBufferEntryNVX* toCount,
    size_t* count);

void count_VkObjectTableIndexBufferEntryNVX(
    uint32_t featureBits,
    const VkObjectTableIndexBufferEntryNVX* toCount,
    size_t* count);

void count_VkObjectTablePushConstantEntryNVX(
    uint32_t featureBits,
    const VkObjectTablePushConstantEntryNVX* toCount,
    size_t* count);

#endif
#ifdef VK_NV_clip_space_w_scaling
void count_VkViewportWScalingNV(
    uint32_t featureBits,
    const VkViewportWScalingNV* toCount,
    size_t* count);

void count_VkPipelineViewportWScalingStateCreateInfoNV(
    uint32_t featureBits,
    const VkPipelineViewportWScalingStateCreateInfoNV* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_direct_mode_display
#endif
#ifdef VK_EXT_acquire_xlib_display
#endif
#ifdef VK_EXT_display_surface_counter
void count_VkSurfaceCapabilities2EXT(
    uint32_t featureBits,
    const VkSurfaceCapabilities2EXT* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_display_control
void count_VkDisplayPowerInfoEXT(
    uint32_t featureBits,
    const VkDisplayPowerInfoEXT* toCount,
    size_t* count);

void count_VkDeviceEventInfoEXT(
    uint32_t featureBits,
    const VkDeviceEventInfoEXT* toCount,
    size_t* count);

void count_VkDisplayEventInfoEXT(
    uint32_t featureBits,
    const VkDisplayEventInfoEXT* toCount,
    size_t* count);

void count_VkSwapchainCounterCreateInfoEXT(
    uint32_t featureBits,
    const VkSwapchainCounterCreateInfoEXT* toCount,
    size_t* count);

#endif
#ifdef VK_GOOGLE_display_timing
void count_VkRefreshCycleDurationGOOGLE(
    uint32_t featureBits,
    const VkRefreshCycleDurationGOOGLE* toCount,
    size_t* count);

void count_VkPastPresentationTimingGOOGLE(
    uint32_t featureBits,
    const VkPastPresentationTimingGOOGLE* toCount,
    size_t* count);

void count_VkPresentTimeGOOGLE(
    uint32_t featureBits,
    const VkPresentTimeGOOGLE* toCount,
    size_t* count);

void count_VkPresentTimesInfoGOOGLE(
    uint32_t featureBits,
    const VkPresentTimesInfoGOOGLE* toCount,
    size_t* count);

#endif
#ifdef VK_NV_sample_mask_override_coverage
#endif
#ifdef VK_NV_geometry_shader_passthrough
#endif
#ifdef VK_NV_viewport_array2
#endif
#ifdef VK_NVX_multiview_per_view_attributes
void count_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    uint32_t featureBits,
    const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX* toCount,
    size_t* count);

#endif
#ifdef VK_NV_viewport_swizzle
void count_VkViewportSwizzleNV(
    uint32_t featureBits,
    const VkViewportSwizzleNV* toCount,
    size_t* count);

void count_VkPipelineViewportSwizzleStateCreateInfoNV(
    uint32_t featureBits,
    const VkPipelineViewportSwizzleStateCreateInfoNV* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_discard_rectangles
void count_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    uint32_t featureBits,
    const VkPhysicalDeviceDiscardRectanglePropertiesEXT* toCount,
    size_t* count);

void count_VkPipelineDiscardRectangleStateCreateInfoEXT(
    uint32_t featureBits,
    const VkPipelineDiscardRectangleStateCreateInfoEXT* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_conservative_rasterization
void count_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    uint32_t featureBits,
    const VkPhysicalDeviceConservativeRasterizationPropertiesEXT* toCount,
    size_t* count);

void count_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    uint32_t featureBits,
    const VkPipelineRasterizationConservativeStateCreateInfoEXT* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_swapchain_colorspace
#endif
#ifdef VK_EXT_hdr_metadata
void count_VkXYColorEXT(
    uint32_t featureBits,
    const VkXYColorEXT* toCount,
    size_t* count);

void count_VkHdrMetadataEXT(
    uint32_t featureBits,
    const VkHdrMetadataEXT* toCount,
    size_t* count);

#endif
#ifdef VK_MVK_ios_surface
void count_VkIOSSurfaceCreateInfoMVK(
    uint32_t featureBits,
    const VkIOSSurfaceCreateInfoMVK* toCount,
    size_t* count);

#endif
#ifdef VK_MVK_macos_surface
void count_VkMacOSSurfaceCreateInfoMVK(
    uint32_t featureBits,
    const VkMacOSSurfaceCreateInfoMVK* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_external_memory_dma_buf
#endif
#ifdef VK_EXT_queue_family_foreign
#endif
#ifdef VK_EXT_debug_utils
void count_VkDebugUtilsObjectNameInfoEXT(
    uint32_t featureBits,
    const VkDebugUtilsObjectNameInfoEXT* toCount,
    size_t* count);

void count_VkDebugUtilsObjectTagInfoEXT(
    uint32_t featureBits,
    const VkDebugUtilsObjectTagInfoEXT* toCount,
    size_t* count);

void count_VkDebugUtilsLabelEXT(
    uint32_t featureBits,
    const VkDebugUtilsLabelEXT* toCount,
    size_t* count);

void count_VkDebugUtilsMessengerCallbackDataEXT(
    uint32_t featureBits,
    const VkDebugUtilsMessengerCallbackDataEXT* toCount,
    size_t* count);

void count_VkDebugUtilsMessengerCreateInfoEXT(
    uint32_t featureBits,
    const VkDebugUtilsMessengerCreateInfoEXT* toCount,
    size_t* count);

#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
void count_VkAndroidHardwareBufferUsageANDROID(
    uint32_t featureBits,
    const VkAndroidHardwareBufferUsageANDROID* toCount,
    size_t* count);

void count_VkAndroidHardwareBufferPropertiesANDROID(
    uint32_t featureBits,
    const VkAndroidHardwareBufferPropertiesANDROID* toCount,
    size_t* count);

void count_VkAndroidHardwareBufferFormatPropertiesANDROID(
    uint32_t featureBits,
    const VkAndroidHardwareBufferFormatPropertiesANDROID* toCount,
    size_t* count);

void count_VkImportAndroidHardwareBufferInfoANDROID(
    uint32_t featureBits,
    const VkImportAndroidHardwareBufferInfoANDROID* toCount,
    size_t* count);

void count_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    uint32_t featureBits,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* toCount,
    size_t* count);

void count_VkExternalFormatANDROID(
    uint32_t featureBits,
    const VkExternalFormatANDROID* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_sampler_filter_minmax
void count_VkSamplerReductionModeCreateInfoEXT(
    uint32_t featureBits,
    const VkSamplerReductionModeCreateInfoEXT* toCount,
    size_t* count);

void count_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    uint32_t featureBits,
    const VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* toCount,
    size_t* count);

#endif
#ifdef VK_AMD_gpu_shader_int16
#endif
#ifdef VK_AMD_mixed_attachment_samples
#endif
#ifdef VK_AMD_shader_fragment_mask
#endif
#ifdef VK_EXT_shader_stencil_export
#endif
#ifdef VK_EXT_sample_locations
void count_VkSampleLocationEXT(
    uint32_t featureBits,
    const VkSampleLocationEXT* toCount,
    size_t* count);

void count_VkSampleLocationsInfoEXT(
    uint32_t featureBits,
    const VkSampleLocationsInfoEXT* toCount,
    size_t* count);

void count_VkAttachmentSampleLocationsEXT(
    uint32_t featureBits,
    const VkAttachmentSampleLocationsEXT* toCount,
    size_t* count);

void count_VkSubpassSampleLocationsEXT(
    uint32_t featureBits,
    const VkSubpassSampleLocationsEXT* toCount,
    size_t* count);

void count_VkRenderPassSampleLocationsBeginInfoEXT(
    uint32_t featureBits,
    const VkRenderPassSampleLocationsBeginInfoEXT* toCount,
    size_t* count);

void count_VkPipelineSampleLocationsStateCreateInfoEXT(
    uint32_t featureBits,
    const VkPipelineSampleLocationsStateCreateInfoEXT* toCount,
    size_t* count);

void count_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    uint32_t featureBits,
    const VkPhysicalDeviceSampleLocationsPropertiesEXT* toCount,
    size_t* count);

void count_VkMultisamplePropertiesEXT(
    uint32_t featureBits,
    const VkMultisamplePropertiesEXT* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_blend_operation_advanced
void count_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    uint32_t featureBits,
    const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT* toCount,
    size_t* count);

void count_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    uint32_t featureBits,
    const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* toCount,
    size_t* count);

void count_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    uint32_t featureBits,
    const VkPipelineColorBlendAdvancedStateCreateInfoEXT* toCount,
    size_t* count);

#endif
#ifdef VK_NV_fragment_coverage_to_color
void count_VkPipelineCoverageToColorStateCreateInfoNV(
    uint32_t featureBits,
    const VkPipelineCoverageToColorStateCreateInfoNV* toCount,
    size_t* count);

#endif
#ifdef VK_NV_framebuffer_mixed_samples
void count_VkPipelineCoverageModulationStateCreateInfoNV(
    uint32_t featureBits,
    const VkPipelineCoverageModulationStateCreateInfoNV* toCount,
    size_t* count);

#endif
#ifdef VK_NV_fill_rectangle
#endif
#ifdef VK_EXT_post_depth_coverage
#endif
#ifdef VK_EXT_validation_cache
void count_VkValidationCacheCreateInfoEXT(
    uint32_t featureBits,
    const VkValidationCacheCreateInfoEXT* toCount,
    size_t* count);

void count_VkShaderModuleValidationCacheCreateInfoEXT(
    uint32_t featureBits,
    const VkShaderModuleValidationCacheCreateInfoEXT* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_descriptor_indexing
void count_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    uint32_t featureBits,
    const VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* toCount,
    size_t* count);

void count_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    uint32_t featureBits,
    const VkPhysicalDeviceDescriptorIndexingFeaturesEXT* toCount,
    size_t* count);

void count_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    uint32_t featureBits,
    const VkPhysicalDeviceDescriptorIndexingPropertiesEXT* toCount,
    size_t* count);

void count_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    uint32_t featureBits,
    const VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* toCount,
    size_t* count);

void count_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    uint32_t featureBits,
    const VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_shader_viewport_index_layer
#endif
#ifdef VK_EXT_global_priority
void count_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    uint32_t featureBits,
    const VkDeviceQueueGlobalPriorityCreateInfoEXT* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_external_memory_host
void count_VkImportMemoryHostPointerInfoEXT(
    uint32_t featureBits,
    const VkImportMemoryHostPointerInfoEXT* toCount,
    size_t* count);

void count_VkMemoryHostPointerPropertiesEXT(
    uint32_t featureBits,
    const VkMemoryHostPointerPropertiesEXT* toCount,
    size_t* count);

void count_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    uint32_t featureBits,
    const VkPhysicalDeviceExternalMemoryHostPropertiesEXT* toCount,
    size_t* count);

#endif
#ifdef VK_AMD_buffer_marker
#endif
#ifdef VK_AMD_shader_core_properties
void count_VkPhysicalDeviceShaderCorePropertiesAMD(
    uint32_t featureBits,
    const VkPhysicalDeviceShaderCorePropertiesAMD* toCount,
    size_t* count);

#endif
#ifdef VK_EXT_vertex_attribute_divisor
void count_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    uint32_t featureBits,
    const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* toCount,
    size_t* count);

void count_VkVertexInputBindingDivisorDescriptionEXT(
    uint32_t featureBits,
    const VkVertexInputBindingDivisorDescriptionEXT* toCount,
    size_t* count);

void count_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    uint32_t featureBits,
    const VkPipelineVertexInputDivisorStateCreateInfoEXT* toCount,
    size_t* count);

#endif
#ifdef VK_NV_shader_subgroup_partitioned
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
void count_VkQueueFamilyCheckpointPropertiesNV(
    uint32_t featureBits,
    const VkQueueFamilyCheckpointPropertiesNV* toCount,
    size_t* count);

void count_VkCheckpointDataNV(
    uint32_t featureBits,
    const VkCheckpointDataNV* toCount,
    size_t* count);

#endif
#ifdef VK_GOOGLE_address_space
#endif
#ifdef VK_GOOGLE_color_buffer
void count_VkImportColorBufferGOOGLE(
    uint32_t featureBits,
    const VkImportColorBufferGOOGLE* toCount,
    size_t* count);

void count_VkImportBufferGOOGLE(
    uint32_t featureBits,
    const VkImportBufferGOOGLE* toCount,
    size_t* count);

void count_VkImportPhysicalAddressGOOGLE(
    uint32_t featureBits,
    const VkImportPhysicalAddressGOOGLE* toCount,
    size_t* count);

#endif
#ifdef VK_GOOGLE_sized_descriptor_update_template
#endif
#ifdef VK_GOOGLE_async_command_buffers
#endif
#ifdef VK_GOOGLE_create_resources_with_requirements
#endif
#ifdef VK_GOOGLE_address_space_info
#endif
#ifdef VK_GOOGLE_free_memory_sync
#endif
#ifdef VK_GOOGLE_async_queue_submit
#endif
#ifdef VK_GOOGLE_linear_image_layout
#endif
#ifdef VK_MVK_moltenvk
#endif
#ifdef VK_GOOGLE_queue_submit_with_commands
#endif

} // namespace goldfish_vk
